openapi: "3.0.3"
info:
  title: eCXv3 - API v1.0
  version: "1.0.0"
  description: |-
    The definitions for the APWG eCrime eXchange data clearinghouse. 
  contact:
    name: eCX Support
    email: support@ecrimex.net
  license:
    name: GPL
    url:  https://www.gnu.org/licenses/gpl-3.0.en.html
servers:
  - url: "https://ecrimex.net/api/v1"
    description: "The Production server"
  - url: "https://sandbox.ecx2.ecrimex.net/api/v1"
    description: "The Sandbox server"
tags:
  - name: phish
    description: Phishing Lure data
  - name: malicious-domain
    description: DNS names performing malicious activities
  - name: malicious-ip
    description: IP Addresses performing malicious activities
  - name: cryptocurrency-addresses
    description: Bitcoin or other cureency wallet identifiers used in crimnal activity
  - name: report-phishing
    description: Real-time archive of the reportphishing@apwg.org email mailbox
  
### The API ENDPOINTS (modules)

paths:

### PHISH MODULE ###

  # Phish operations that use url parameters
  /phish/{id}:
    get:
      tags:
        - phish
      operationId: GetPhishID
      description: "Get a specific phish record using it's id"
      summary: Retrieve one phish record
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      #TODO: Add requestBody for fields tp return
      responses:
        '200':
          description: "Results are a series of data records in a wrapper"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhishRespBody"
                example:
                 value:
                  {
                    "id": 108584304,
                    "url": "http:\/\/demolink2.com/phish1.php",
                    "brand": "BDA",
                    "discoveredAt": 1002020785,
                    "createdAt": 1702020185,
                    "updatedAt": 1702020785,
                    "status": "inactive",
                    "confidence": 50
                  }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    put:
      tags:
        - phish
      operationId: PutPhish
      summary: "Update the confidence value or status of a phish record"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      requestBody:
        description: The URL field cannot be updated with this operation.
        required: true
        content:
          application/json:
            schema:    
              $ref: "#/components/schemas/PhishUpdateReqBody"
              example:
                value:
                  {
                    "status": "inactive",
                    "confidence": 50
                  }
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/id"
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

  # Phish operations that don't use url parameters
  /phish:
    get:
      tags:
        - phish
      operationId: GetPhish
      description: "Get upto 10,000 of the latest phish when no id parameter is used"
      summary: Retrieve lots of phish records
      #TODO: Add requestBody for fields, sorts, and searches
      responses:
        '200':
          description: "Results are a series of these records inside a CommonRespBody wrapper"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhishRespBody"
              example:
                # The data looks like this:
                { 
                "id": 108584304,
                "url": "http:\/\/demolink2.com/phish1.php",
                "brand": "BDA",
                "discoveredAt": 1002020785,
                "createdAt": 1702020185,
                "updatedAt": 1702020785,
                "status": "inactive",
                "confidence": 50
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    post:
      tags:
        - phish
      operationId: PostPhish
      summary: Submit one or more phish records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhishReqBody"
              example:
                value:
                  {
                    "url": "http://demolink3.com",
                    "brand": "APWG",
                    "discoveredAt": 1672275596,
                    "status": "inactive",
                    "confidence": 50
                  }
      responses:
        "201":
          description: ""
          content:
            'application/json':
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

### MALICIOUS-IP PATHS ###

  # Malicious-IP module operations that use url parameters
  /malicious-ip/{id}:
    get:
      tags:
        - malicious-ip
      operationId: GetMalIP
      description: "Get a specific malicious-ip record using it's id"
      summary: "Retrieve one malicious-ip record"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      #requestBody:
      #TODO: Add requestBody for fields to return
        
      responses:
        '200':
          description: "Results are a series of these records, or a subset of fields"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/MalIPRespBody"
              example:
                  value:
                    { 
                    "id": 128682205,
                    "discoveredAt": 1687367508,
                    "brand": "IANA",
                    "ip": "10.2.3.4",
                    "confidence": 100,
                    "description": "IP: 10.2.3.4 exploited for large-scale scanning attacks",
                    "updatedAt": 1688011179,
                    "status": "active",
                    "createdAt": 1687367508,
                    "metadata": {
                      "submissionCount": 1
                    },
                    "asn": [1]
                    }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    put:
      tags:
        - malicious-ip
      operationId: PutMalIP
      summary: "Update the confidence value or status of a malicious-ip record"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:    
              $ref: "#/components/schemas/MalIPUpdateReqBody"
            example:
              value:
                {
                  "brand": "ICANT",
                  "confidence": 100,
                  "status": "active"
                }
      responses:
        "201":
          description: ""
          content:
            application/json:
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    #TODO: Add a note to mal-ip?

  # Malicious-ip operations that don't use url parameters
  /malicious-ip:
    get:
      tags:
        - malicious-ip
      operationId: GetMalIP
      description: "Get a specific malicious-ip record using it's record_id or upto 10,000 of the latest entries with no id parameter"
      summary: "Retrieve one malicious-ip record"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      #TODO: Add requestBody for fields, sorts, and searches
      responses:
        '200':
          description: "Results are a series of these records within a CommonRespBody"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalIPRespBody"
              example:
                # The data looks like this:
                { 
                "confidence": 100,
                "submissionCount": 1,
                "classification": "malicious",
                "discoveredAt": 1701821108,
                "createdAt": 1701821108,
                "domain": "trippynaturebrainfoodshop.com",
                "files": [],
                "id": "392807",
                "updatedAt": 1701821108,
                "status": "active",
                "notes": [
                  {
                    "createdAt": 1701821108,
                    "description": "Advance Fee Fraud\nScam type: drug",
                    "id": "392807.note0"
                  }
                ],
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    post:
      tags:
        - malicious-ip
      operationId: PostMalIP
      summary: "Submit one or more IP Addresses"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MalIPReqBody"
            example:
              {
              "brand": "APWG",
              "ip": "10.1.3.6",
              "confidence": 90,
              "discoveredAt": 1702427976,
              "description": "deploying malware disguised as email to members",
              "status": "active"
              }
      responses:
        "201":
          description: ""
          content:
            application/json:
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

### MALICIOUS-DOMAIN PATHS ###

  # Malicious-domain operations that use url parameters
  /malicious-domain/{id}:
    get:
      tags:
        - malicious-domain
      operationId: GetMalDomains
      description: "Get a specific malicious-ip record using it's id or upto 10,000 of the latest entries with no id parameter"
      summary: "Retrieve an entry"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      #TODO: Add requestBoody for fields
      responses:
        '200':
          description: "One record is returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MalDomainRespBody'
              example:
                {
                "current_page": 1,
                "data": [
                  {
                    "id": 345569,
                    "domain": "anydomain.placeable.com",
                    "discoveredAt": "2023-12-07T16:22:55",
                    "classification": "scam",
                    "confidence": 100,
                    "status": "active",
                    "createdAt": "2023-12-09T18:22:02+00:00",
                    "updatedAt": "2023-12-09T18:22:02+00:00",
                    "notes": [],
                    "metadata": {
                      "submissionCount": 1
                    }
                  }
                ] 
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    put:
      tags:
        - malicious-domain
      operationId: PutMalDomain
      summary: "Update the confidence value or status of a malicious-ip record"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:    
              $ref: "#/components/schemas/MalDomainReqBody"
            example:
              value:
              {
                "classification": "scam",
                "confidence": 100,
                "discoveredAt": 1702146209,
                "domain": "anydomain.placeable.com",
                "status": "active"
              }
      responses:
        "201":
          description: ""
          content:
            application/json:
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

  # Malicious-domain operations that don't use url parameters
  /malicious-domain:
    get:
      tags:
        - malicious-domain
      operationId: GetMalIP
      description: "Get upto 10,000 of the latest entries with no id parameter"
      summary: "Retreive many records"
      #TODO: Add requestBody for fields, sorts, and searches
      responses:
        '200':
          description: "Results are a series of these records within a CommonRespBody"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MalDomainRespBody"
              example:
                # This is what the data looks like:
                { 
                  "id": 345569,
                  "domain": "anydomain.placeable.com",
                  "discoveredAt": "2023-12-07T16:22:55",
                  "classification": "scam",
                  "confidence": 100,
                  "status": "active",
                  "createdAt": "2023-12-09T18:22:02+00:00",
                  "updatedAt": "2023-12-09T18:22:02+00:00",
                  "notes": [],
                  "metadata": {
                    "submissionCount": 1
                  }
                  }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    post:
      tags:
        - malicious-domain
      operationId: PostMalIP
      summary: "Submit one or more IP Addresses"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MalDomainReqBody"
            example:
              value:
              {
                "classification": "scam",
                "confidence": 100,
                "discoveredAt": 1702146209,
                "domain": "anydomain.placeable.com",
                "status": "active"
              }
      responses:
        "201":
          description: ""
          content:
            application/json:
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []
   
### REPORT-PHISHING PATHS ###
### and the only user operation is to retrieve/get records

  # Report-phishing operations that use url parameters

  /report-phishing/{id}:
    get:
      tags:
        - report-phishing
      operationId: GetReportPhishing
      description: "Get a specific report-phishing email record using it's record_id"
      summary: "A short summary"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      #TODO: Add requestBody for fields
      responses:
        '200':
          description: "Results are a series of these records"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportPhishingRespBody"
              example:
                $ref: '#/components/examples/example-reportphishing'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

  # reportphisihng operations that don't use an id parameter.

  /report-phishing:
    get:
      tags:
        - report-phishing
      operationId: GetReportPhishing
      description: "Get upto 10,000 of the latest entries with no id parameter"
      summary: "Retreive many records"
      #TODO: Add requestBody for fields, sorts, and searches
      responses:
        '200':
          description: "Results are a series of these records within a CommonRespBody"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportPhishingRespBody"
              example:
                $ref: '#/components/examples/example-reportphishing'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

### CRYPTOCURRENCY-ADDRESSES PATHS ###

  # Cryptocurrency-address operations that use url parameters
  /cryptocurrency-addresses/{id}:
    get:
      tags:
        - cryptocurrency-addresses
      operationId: GetCrypto
      description: "Get a specific cryptocurrency record using it's id"
      summary: "A short summary"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      #TODO: Add requestBody for fields
      responses:
        '200':
          description: "Results are one record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CryptoRespBody"
              example:
                {
                  "id": 1292752,
                  "currency": "ADA",
                  "source": "web",
                  "discoveredAt": 1702253398,
                  "address": "adasdasdasd",
                  "crimeCategory": "blackmail",
                  "siteLink": "googole.com",
                  "price": 70,
                  "email": "",
                  "confidence": "100",
                  "createdAt": 1702253398,
                  "updatedAt": 1702253398,
                  "status": "",
                  "procedure": "manual",
                  "actorCategory": "asdasd",
                  "metadata": {
                    "submissionCount": 1
                  },
                  "notes": [],
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []
    
    put:
      tags:
        - cryptocurrency-addresses
      operationId: PutCrypto
      summary: "Update the confidence value or status of a malicious-ip record"
      parameters:
        - $ref: "#/components/parameters/CommonParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:    
              $ref: "#/components/schemas/CryptoUpdateReqBody"
            example:
              value:
                {
                "price": 85, "status": "active",
                "confidence": 100
                }
      responses:
        "201":
          description: ""
          content:
            application/json:
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security:
        - api_key: []


      #TODO: Add a note to crypto

  # Cryptocurreny-addresses operations that don't use url parameters
  /cryptocurrency-addresses:
    get:
      tags:
        - cryptocurrency-addresses
      operationId: GetCrypto
      description: "Get upto 10,000 of the latest cryptocurrency records"
      summary: "Get the most recent group of cryptocurrency entries"
      #TODO: Add requestBody for fields, sorts, and searches
      responses:
        '200':
          description: "Results are a series of these records within a CommonRespBody"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CryptoRespBody"
              example:
                {
                "id": 1292752,
                "currency": "ADA",
                "source": "web",
                "discoveredAt": "2023-12-11T00:09:30.313Z",
                "address": "",
                "crimeCategory": "blackmail",
                "siteLink": "googley.com",
                "price": 70,
                "email": "",
                "confidence": 100,
                "createdAt": 1702253398,
                "updatedAt": 1702253398,
                "status": "",
                "procedure": "manual",
                "actorCategory": "bad",
                "metadata": {
                  "submissionCount": 1
                },
                "notes": [],
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []

    post:
      tags:
        - cryptocurrency-addresses
      operationId: PostCrypto
      summary: "Submit one or more IP Addresses"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CryptoReqBody"
            example:
              value:
                {
                "currency": "BTC",
                "source": "email",
                "discoveredAt": 1702486863,
                "address": "19U1xBf2UZeLfPkVh1Gu3WGHheYCzjsVxs",
                "crimeCategory": "extprtion",
                "price": 1390,
                "email": "forged",
                "confidence": 100,
                "createdAt": 1702253398,
                "updatedAt": 1702417553,
                "status": "",
                "procedure": "manual",
                "actorCategory": "nut"
                }
      responses:
        "201":
          description: ""
          content:
            application/json:
              example:
                { 
                  "id": 108584304
                }
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
      security: 
        - api_key: []



### REUSABLE COMPONENTS ###

components:
    schemas:

      Error-types:
        type: string
        enum:
          - api_error
          - card_error
          - invalid_request_error

      ErrorModel:
        description: "The Error Model"
        type: object
        properties:
          class:
            $ref: '#/components/schemas/Error-types'
          code:
            oneOf:
              - title: '400'
                description: "Bad Request	- The request was unacceptable, often due to missing a required parameter or the JSON failed to validate."
              - title: '401'
                description: "Unauthorized - No valid API key provided."
              - title: '402'
                description: "Request Failed - The parameters were valid but the request failed."
              - title: "403"
                description: "Forbidden - The API key doesn't have permissions to perform the request."
              - title: '404'
                description: "Not Found - The requested resource doesn't exist."
              - title: '405'
                description: "Method Not Allowed - The server doesn't support the HTTP method used in the request."
              - title: '409'
                description: "Duplicate - This object is already in the database"
              - title:  "428"
                description: "Error - You attempted to submit a resource as a false positive (with a confidence level = 0)"
              - title: '429'
                description: "Too Many Requests	Too many requests hit the API too quickly. We recommend an exponential backoff of your requests."
              - title: '50X'
                description: "Server Errors - Something went wrong on APWG's end. (These are rare.)"
          message:
            type: string
          errors:
            type: string


            
      CommonResponseBody:
        description: "This is the structure for all eCX responses. Data is retirned in 'pages' of 500 entries. Use the 'next' link to get the next 500 entries."
        type: object
        properties:
          current_page:
            type: integer
          data:
            type: array
            description: "This field is a series of one of the following types:"
            oneOf:
              - $ref: "#/components/schemas/PhishRespBody"
              - $ref: "#/components/schemas/MalIPRespBody"
              - $ref: "#/components/schemas/MalDomainRespBody"
              - $ref: "#/components/schemas/CryptoRespBody"
              - $ref: "#/components/schemas/ReportPhishingRespBody"
          first_page_url: 
            type: string
          from: 
            type: integer
          last_page:
            type: integer
          last_page_url:
            type: string
          links: 
            type: array
            description: There is one of these items for each page of results available.
            items: 
              type: object
              properties: 
                url:
                  type: string
                label: 
                  type: string
                active: 
                  type: boolean
          next_page_url: 
            type: string
          path: 
            type: string
          per_page: 
            type: integer
          prev_page_url: 
            type: string
          to:
            type: integer
          total:
            type: integer
  
### COMMON REQUEST AND RESPONSE BODY FIELDS ###

      id:
        type: integer
        description: "Unique identifier for the object."
      actorCategory: 
        type: string
        description: "If known, the gang, agent, or script kiddie responsible for this action."
      address:
        type: string
      brand:
        type: string
        description: "The Brand Name used in the phish"
      classification-maldomain:
        type: string
        description: "The activity detected"
        enum: [botnet C&C,scam,fake store,malicious,malware,other,storefront]
      confidence:
        type: integer
        enum: [0,50,90,100]
        description: "An indicator of how confident the submittor that this is a real phish. Possible values:\n0 - Entry is a false positive  \n50 - Entry looks bad or suspicious but not verified\n90 - Our magic AI script found this\n100 - Verfied entry"
      createdAt:
        type: integer
        format: epoch
        description: "When this phish object was created"
      createdBy:
        type: integer
        description: "(admin viewable only) The userid of the user that created this record"
      crimeCategory:
        description: ""
        type: string
        enum: [blackmail,crypto generator darknet market,extortion,illicit account,ransomware,scam,tumbler,other]
      crypto-source:
        description: "Where the data was found"
        type: string
      currency:
        description: "The predefined crypto currencies"
        type: string
        enum: 
          - title:  ADA
            description:  Cardano
          - title:  BCH
            description:  Bitcoin Cash
          - title:  BNB
            description:  Binance Coin
          - title:  BTC
            description:  Bitcoin
          - title:  DASH
            description:  Dash
          - title:  DOGE
            description:  Dogecoin
          - title:  ETH
            description:  Ethereum
          - title:  LTC
            description:  Litecoin
          - title:  NED
            description:
          - title:  TRX
            description:  Tron
          - title:  XLM
            description:  Stellar
          - title:  XMR
            description:  
          - title:  XRP
            description:  XRP
          - title:  XZC
            description:
          - title:  ZEC
            description:
      discoveredAt:
        type: integer
        format: epoch
        description: "Expressed as milliseconds since the epoch"
      ip: 
        type: array
        items:
          type: string
      metadata:
        type: object
        properties:
          submissionCount:
            type: integer
      notes: 
        type: object
        properties:
          createdAt: 
            type: integer
          description: 
            type: string
          id: 
            type: integer
      sortDirection:
        type: string
        enum: [asc,desc]
      status:
        type: string
        enum:
          - active
          - inactive
        description: "Indicates whether the phish page is still accessible."
      updatedAt:
        type: integer
        format: epoch
        description: "The last time this record was modified"
      updatedBy:
        type: integer
        description: "(admin viewable only) The userid of the last user to modify tis record"





### PHISH MODULE SCHEMAS ###
  
      PhishReqBody: 
        type: object
        properties:
          url:
            type: string
            description: "phish url in format http[s]://domain/page"
          brand:
            $ref: "#/components/schemas/brand"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
            $ref: "#/components/schemas/confidence"

      PhishUpdateReqBody: 
        type: object
        properties:
          brand:
            $ref: "#/components/schemas/brand"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
            $ref: "#/components/schemas/confidence"

      PhishRespBody:
        description: "The response from a phish call."
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          url:
            type: string
          brand:
            $ref: "#/components/schemas/brand"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
            $ref: "#/components/schemas/confidence"
          ip: 
            type: array
            items:
              type: string
          asn: 
            type: array
            items: 
              type: integer
          updatedAt: 
            $ref: "#/components/schemas/updatedAt"
          createdAt: 
            $ref: "#/components/schemas/createdAt"
          metadata": 
            type: object
            properties:
              submission_count: 
                type: integer
  
  
      SearchObject:
        type: object
        properties:
          filters:
            type: array
            anyOf:
            - title: id
            - title: url
            - title: brand
            - title: discoveredAt
            - title: status
            - title: confidence
            - title: createdAt
            - title: updatedAt
          fields:
            type: array
            $ref: "#/components/schemas/PhishFieldsObject"
          sorts:
            type: array
            $ref: "#/components/schemas/PhishSortsObject"
            limit:
              type: integer

### MALICIOUS-IP SCHEMAS 

      MalIPReqBody: 
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          ip:
            $ref: "#/components/schemas/ip"
          brand:
            $ref: "#/components/schemas/brand"
          description:
            type: string
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
            $ref: "#/components/schemas/confidence"
          createdAt:
            $ref: "#/components/schemas/createdAt"

      MalIPUpdateReqBody: 
        type: object
        properties:
          ip:
            $ref: "#/components/schemas/ip"
          brand:
            $ref: "#/components/schemas/brand"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
            $ref: "#/components/schemas/confidence"
          description:
            type: string
                   
  
      MalIPRespBody:
        description: "A malicious-ip response data"
        type: object
        properties:
          ip:
            $ref: "#/components/schemas/ip"
          brand:
            $ref: "#/components/schemas/brand"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
            $ref: "#/components/schemas/confidence"
          description:
            type: string
          createdAt:
            $ref: "#/components/schemas/createdAt"
          updatedAt:
            $ref: "#/components/schemas/updatedAt"
          metadata:
            $ref: "#/components/schemas/metadata"
  
  
### MALICIOUS-DOMAIN SCHEMAS ###
      MalDomainReqBody:
        description: "The data for a malicious-domain insert."
        type: object
        properties:  
          domain:
            type: string
          classification:
            $ref: "#/components/schemas/classification-maldomain"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
           $ref: "#/components/schemas/confidence"
          notes: 
            type: object
            properties:
              description: 
                type: string
      
      MalDomainRespBody:
        description: "The response from a malicious-domain call."
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          domain:
            type: string
          classification:
            $ref: "#/components/schemas/classification-maldomain"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
            $ref: "#/components/schemas/confidence"
          updatedAt: 
            $ref: "#/components/schemas/updatedAt"
          createdAt: 
            $ref: "#/components/schemas/createdAt"
          metadata: 
            type: object
            properties:
              submission_count: 
                type: integer
          notes: 
            $ref: "#/components/schemas/notes"

      MalDomainUpdateBody:
        description: The fields to use for updating a malicious-domain record
        type: object
        properties:  
          domain:
            type: string
          classification:
            $ref: "#/components/schemas/classification-maldomain"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          status:
            $ref: "#/components/schemas/status"
          confidence:
           $ref: "#/components/schemas/confidence"
        

### REPORT-PHISHING SCHEMAS ###

      ReportPhishingRespBody:
        description: "The data from a report-phishing get operation"
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          sourceIp: 
            type: string
          emailSubject: 
            type: string
          recipientEmail: 
            type: string
          senderEmail: 
            type: string
          emailHeaders: 
            type: string 
          emailBody: 
            type: string
          sentAt: 
            type: integer
          receivedAt": 
            type: integer
          createdAt:
            $ref: "#/components/schemas/createdAt"
          updatedAt:
            $ref: "#/components/schemas/updatedAt"
          metadata:
            $ref: "#/components/schemas/metadata"
    
  
### CRYPTOCURRENCY-ADDRESSES SCHEMAS ###

      CryptoReqBody:
        description: "The fields in a Cryptocurrency-addresses request Body"
        type: object
        properties:
          currency:
            required: true
            $ref: "#/components/schemas/currency"
          source:
            $ref: "#/components/schemas/crypto-source"
          discoveredAt:
            required: true
            $ref: "#/components/schemas/discoveredAt"
          address:
            required: true
            $ref: '#/components/schemas/address' 
            description: The wallet id or other identifying value
          crimeCategory: 
            $ref: "#/components/schemas/crimeCategory"
          siteLink: 
            type: string
            description: Web address, if found on the web
          price:
            #TODO: should price be a string, so $ # etc can be used?
            type: integer
            description: The approximate cost of this activity
          email: 
            type: string
            description: The source meail address, if activity came via email
          procedure: 
            type: string
            enum:
              - title:  "manual"
                description: "A human found this activity."
              - tile: "automatic"
                description: "A script or bot found this activity."
          actorCategory: 
            $ref: '#/components/schemas/actorCategory'
          confidence:
            required: true
            $ref: "#/components/schemas/confidence"
          notes: 
            $ref: "#/components/schemas/notes"

      CryptoRespBody:
        description: Something goes here
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          currency:
            $ref: "#/components/schemas/currency"
          source:
            $ref: "#/components/schemas/crypto-source"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          address:
            type: string
            description: The wallet id or other identifying value
          crimeCategory: 
            $ref: "#/components/schemas/crimeCategory"
          siteLink: 
            type: string
            description: Web address, if found on the web
          price:
            type: integer
            description: The approximate costof this activity
          email: 
            type: string
            description: The source email address, if activity came via email
          procedure: 
            type: string
            enum:
              - title:  "manual"
                description: "A human found this activity."
              - tile: "automatic"
                description: "A script or bot found this activity."
          actorCategory: 
            $ref: '#/components/schemas/actorCategory'
          confidence:
            $ref: "#/components/schemas/confidence"
          updatedAt: 
            $ref: "#/components/schemas/updatedAt"
          createdAt: 
            $ref: "#/components/schemas/createdAt"
          metadata: 
            $ref: "#/components/schemas/metadata"
          notes: 
            $ref: "#/components/schemas/notes"

      CryptoUpdateReqBody:
        description: The fields to use for updating a cryptocurreny record.
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          currency:
            $ref: "#/components/schemas/currency"
          source:
            $ref: "#/components/schemas/crypto-source"
          discoveredAt:
            $ref: "#/components/schemas/discoveredAt"
          address:
            type: string
            description: The wallet id or other identifying value
          crimeCategory: 
            $ref: "#/components/schemas/crimeCategory"
          siteLink: 
            type: string
            description: Web address, if found on the web
          price:
            type: integer
            description: The approximate cost of this activity
          email: 
            type: string
            description: The source meail address, if activity came via email
          procedure: 
            type: string
            enum:
              - title:  "manual"
                description: "A human found this activity."
              - tile: "automatic"
                description: "A script or bot found this activity."
          actorCategory: 
            $ref: '#/components/schemas/actorCategory'
          confidence:
            required: true
            $ref: "#/components/schemas/confidence"
          metadata: 
            $ref: "#/components/schemas/metadata"
          notes: 
            $ref: "#/components/schemas/notes"
  
### COMMON PARAMETERS
  
    parameters:
      CommonParameters:
          name: id
          in: path
          description: The id of the record to be returned. Without an id, the most recent 10,000 records are returned
          required: true
          explode: true
          schema:
            type: integer

      SearchObject:
        name: SearchObject
        in: query
        required: true
        description: ""
        schema:
          $ref: "#/components/schemas/PhishFieldsObject"
  
    examples:
      example1:
        description: "This is an example of a no-param response body."
        value:
          {
          "current_page": 1,
          "data": {
            "json events"
          },
          "first_page_url": "https:\/\/ecrimex.net\/api\/v1\/phish?page=1",
          "from": 1,
          "last_page": 400,
          "last_page_url": "https:\/\/ecrimex.net\/api\/v1\/phish?page=400",
          "links":  [
            "url": null,
            "label": "&laquo; Previous",
            "active": false,
          ],
          "next_page_url": "https:\/\/ecrimex.net\/api\/v1\/phish?page=2",
          "path": "https:\/\/ecrimex.net\/api\/v1\/phish",
          "per_page": 25,
          "prev_page_url": "",
          "to": 25,
          "total": 10000
          }
  
      example-reportphishing:
        description: This is what the data looks like, abridged
        value:
          {
            "id": 19492278,
            "sourceIp": "",
            "emailSubject": "PHISING SITES",
            "recipientEmail": "reportphishing@apwg.org",
            "senderEmail": "eCrime Support <support@ecrimex.net>",
            "emailHeaders": "Return-Path: <support@ecrimex.net>\nDelivered-To: feed10@apwgmta.apwg.net\nAuthentication-Results: mail.apwg.org;\n\tdkim=pass (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.a=rsa-sha256 ",
            "emailBody": "Content-Type: text/plain; charset=\"UTF-8\"\n
            Hello, I want to report a spam link (gambling sites ilegal) in indonesia\nthat use link :\n\nhttps://www.example.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://ynsnyvpunk.1234567890.pl/\n
            Please help us to immediately takedown those links that appear.  Despite what it is pretending, this is a phising site and not an official\nwebsite.\n
            You are providing service to the people operating the Website while it is\n
            very obviously being used for fraud, So please take it down as soon as\npossible ...\n\n
            Please cooperate\nThank You for your attention\n\n",
            "sentAt": 1702130917,
            "discoveredAt": 1702102201,
            "receivedAt": 1702102144,
            "createdAt": "",
            "updatedAt": 1702102201,
            "metadata": {
              "submissionCount": 1
            }
          }
   
    securitySchemes:
      api_key:
        type: apiKey
        name: Authorization
        in: header
        description: This API uses a http Header "Authentication" that contains a "Bearer <api_key>" value
      